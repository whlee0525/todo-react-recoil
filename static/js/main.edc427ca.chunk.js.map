{"version":3,"sources":["states/atoms.ts","components/TodayColorButton.tsx","components/TodayColorSelects.tsx","components/TodayColorSelected.tsx","components/Left.tsx","components/TodayTodoInput.tsx","components/TodayTodoLine.tsx","components/TodayTodoList.tsx","components/Right.tsx","components/Title.tsx","App.tsx","index.js"],"names":["colorState","atom","key","default","todosState","StyledWrapper","styled","button","color","TodayColorBox","console","log","setColor","useSetRecoilState","onClick","div","COLORS","TodayColorSelects","map","useRecoilValue","StyledLeft","Left","StyledInput","input","StyledButton","TodayTodoInput","setTodos","useState","inputData","setInputData","handleClick","newTodo","id","Date","getUTCMilliseconds","content","done","prev","placeholder","value","onChange","e","target","onKeyPress","StyledButtonRemove","TodayTodoLine","onRemove","onDone","TodayTodoList","useRecoilState","todos","length","line","selectedId","filter","todo","StyledRight","Right","Title","title","setTitle","AppWrapper","MainContent","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.edc427ca.chunk.js","sourcesContent":["import { atom } from 'recoil';\nimport { Todo, Color } from '../types';\n\nexport const colorState = atom<Color>({\n    key: 'colorState', \n    default: 'white',\n  });\n\nexport const todosState = atom<Todo[]>({\n    key: 'todosState', \n    default: [],\n  });","import React from 'react';\nimport styled from 'styled-components';\nimport { useSetRecoilState } from 'recoil';\n\nimport { colorState } from '../states/atoms';\nimport { Color } from '../types';\n\ninterface Props {\n  color: Color;\n}\n\nconst StyledWrapper = styled.button`\n  margin: 10px;\n  width: 50px;\n  height: 50px;\n  background-color: ${({ color }) => color ? `${color};` : `white;`};\n\n  border: none;\n  outline: none;\n  cursor: pointer;\n`\n\nexport default function TodayColorBox({ color }: Props) {\n  console.log('[recoil] setColor');\n\n  const setColor = useSetRecoilState(colorState);\n\n  const handleClick = () => setColor(color);\n\n  return (\n    <StyledWrapper color={color} onClick={handleClick}>\n      {color}\n    </StyledWrapper>\n  )\n};","import React from 'react'\nimport styled from 'styled-components'\n\nimport TodayColorButton from './TodayColorButton';\n\nconst StyledWrapper = styled.div`\n  background-color: #9ecbd1;\n`\n\nconst COLORS = ['red', 'orange', 'yellow'];\n\nexport default function TodayColorSelects() {\n  return (\n    <StyledWrapper>\n      {COLORS.map(color => <TodayColorButton key={color} color={color} />)}\n    </StyledWrapper>\n  )\n};","import React from 'react'\nimport styled from 'styled-components'\nimport { useRecoilValue } from 'recoil';\nimport { colorState } from '../states/atoms';\n\nconst StyledWrapper = styled.div`\n    margin-top: 50px;\n    width: 100%;\n    height: 70px;\n    background-color: ${({ color }) => color ? `${color};` : `white;`};\n  `\n\nexport default function TodayColorBox() {\n  console.log('[recoil] color');\n\n  const color = useRecoilValue(colorState);\n\n  return <StyledWrapper color={color}></StyledWrapper>\n};","import React from 'react';\nimport styled from 'styled-components';\nimport TodayColorSelects from './TodayColorSelects';\nimport TodayColorSelected from './TodayColorSelected';\n\nconst StyledLeft = styled.div`\n  box-sizing: border-box;\n  width: 450px;\n  padding: 50px;\n\n  text-align: center;\n  background-color: #92bdc9;\n`;\n\n\nexport default function Left() {\n  return (\n    <StyledLeft>\n      <h1>Feeling</h1>\n      <br />\n      <TodayColorSelects />\n      <TodayColorSelected />\n    </StyledLeft>\n  );\n}","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useSetRecoilState } from 'recoil';\nimport { todosState } from '../states/atoms';\n\n\nconst StyledInput = styled.input`\n  background-color: #9ecbd1;\n  border: none;\n  height: 70px;\n  width: 100%;\n  padding: 0 10px;\n  outline: none;\n`;\n\nconst StyledButton = styled.button`\n  width: 100%;\n  height: 40px;\n  margin-top: 10px\n`;\n\nexport default function TodayTodoInput() {\n  console.log('[recoil] setTodos');\n\n  const setTodos = useSetRecoilState(todosState);\n\n  const [inputData, setInputData] = useState('');\n\n  const handleClick = () => {\n    const newTodo = { id: new Date().getUTCMilliseconds(), content: inputData, done: false };\n    setTodos(prev => [...prev, newTodo]);\n    setInputData('');\n  }\n\n  const handleEnter = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleClick();\n    }\n  }\n\n  return (\n    <>\n      <StyledInput\n        placeholder=\"What's my plan?\"\n        value={inputData}\n        onChange={e => setInputData(e.target.value)}\n        onKeyPress={handleEnter}\n      />\n      <StyledButton onClick={handleClick} >Do!</StyledButton>\n    </>\n  );\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { Todo } from '../types';\n\ninterface Props extends Omit<Todo, 'id'> {\n  onRemove: () => void;\n  onDone: () => void;\n};\n\ninterface StyledProps {\n  done?: boolean;\n}\n\nconst StyledWrapper = styled.div<StyledProps>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  background-color: #fbdad7;\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 10px;\n  cursor: pointer;\n\n  &:hover {\n   background-color: #e6c6c3; \n  }\n\n  > div {\n    ${({ done }) => done && `\n    text-decoration: line-through;\n    color: gray;\n  `}\n  }\n`;\n\nconst StyledButtonRemove = styled.button`\n  cursor: pointer;\n  width: 30px;\n  height: 30px;\n  border: none;\n  background-color: rgba(0,0,0, 0.1);\n\n  &:hover {\n    background-color: rgba(0,0,0, 0.2);\n  }\n`;\n\nexport default function TodayTodoLine({ content, done, onRemove, onDone }: Props) {\n  return (\n    <StyledWrapper done={done} onClick={onDone}>\n      <div>{content}</div>\n      <StyledButtonRemove onClick={onRemove}>X</StyledButtonRemove>\n    </StyledWrapper>\n  );\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { useRecoilState } from 'recoil';\nimport { todosState } from '../states/atoms';\n\nimport TodayTodoLine from './TodayTodoLine';\n\n\nconst StyledWrapper = styled.div`\n  margin-top: 50px;\n  background-color: #9ecbd1;\n  width: 100%;\n  padding: 10px;\n`;\n\nexport default function TodayTodoList() {\n  console.log('[recoil] todos');\n\n  const [ todos, setTodos ] = useRecoilState(todosState);\n\n  const handleRemove = (selectedId: number) =>\n    setTodos(prev => prev.filter(({ id }) => id !== selectedId));\n\n  const handleDone = (selectedId: number) =>\n    setTodos(prev =>\n      prev.map(todo => (todo.id === selectedId) ? { ...todo, done: !todo.done } : todo));\n\n  return (\n    <StyledWrapper>\n      {!todos.length && 'No todos'}\n      {todos.map(line =>\n        <TodayTodoLine\n          key={line.id}\n          onRemove={() => handleRemove(line.id)}\n          onDone={() => handleDone(line.id)}\n          {...line}\n        />)}\n    </StyledWrapper>\n  );\n}","import React from 'react';\nimport styled from 'styled-components';\n\nimport TodayTodoInput from './TodayTodoInput';\nimport TodayTodoList from './TodayTodoList';\n\nconst StyledRight = styled.div`\n  box-sizing: border-box;\n  width: 450px;\n  padding: 50px;\n\n  text-align: center;\n  background-color: #92bdc9;\n`;\n\nexport default function Right() {\n  return (\n    <StyledRight>\n      <h1>Todos</h1>\n      <br />\n      <TodayTodoInput />\n      <TodayTodoList />\n    </StyledRight>\n  );\n}","import React, { useState } from 'react';\n\nexport default function Title() {\n  console.log('[Page] Title');\n\n  const [title, setTitle] = useState('Make own title');\n\n  return (\n    <>\n      <h2>{title}</h2>\n      <input value={title} onChange={e => setTitle(e.target.value)} />\n    </>);\n}","import React from 'react';\nimport styled from 'styled-components';\nimport {RecoilRoot} from 'recoil';\n\nimport Left from './components/Left';\nimport Right from './components/Right';\nimport Title from './components/Title';\n\nconst AppWrapper = styled.div`\n  width: 1080px;\n  min-height: 720px;\n  margin-top: 100px;\n  margin-right: auto;\n  margin-left: auto;\n  background-color: #dce0e1;\n\n  padding: 50px 0;\n  text-align: center;\n`;\n\nconst MainContent = styled.div`\n  margin-top: 50px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n`;\n\nexport default function App() {\n\n  return (\n    <AppWrapper>\n      <Title />\n      <RecoilRoot >\n        <MainContent>\n          <Left />\n          <Right />\n        </MainContent>\n      </RecoilRoot>\n    </AppWrapper>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}